# Spotizerr Sealed Secret Template
#
# This is a template for creating a sealed secret for Spotizerr.
# Follow these steps to create and deploy the secret:
#
# 1. Fill in the actual values below (remove comments)
# 2. Create the secret:
#    kubectl create secret generic spotizerr-secrets \
#      --from-literal=REDIS_PASSWORD='your-redis-password' \
#      --from-literal=JWT_SECRET='your-long-random-jwt-secret' \
#      --from-literal=DEFAULT_ADMIN_PASSWORD='your-admin-password' \
#      --namespace spotizerr \
#      --dry-run=client -o yaml > /tmp/spotizerr-secret.yaml
#
# 3. Seal the secret:
#    kubeseal --format=yaml < /tmp/spotizerr-secret.yaml > spotizerr-sealed-secret.yaml
#
# 4. Add the sealed secret to sabkhi_lab_secrets repo
#
# 5. Clean up temp file:
#    rm /tmp/spotizerr-secret.yaml
#
# Note: Only create these secrets if you need them:
# - REDIS_PASSWORD: Always recommended to set a secure password
# - JWT_SECRET: Required only if ENABLE_AUTH=true
# - DEFAULT_ADMIN_PASSWORD: Required only if ENABLE_AUTH=true
# - SSO secrets: Required only if SSO_ENABLED=true

---
# Example secret structure (DO NOT commit this with real values!)
apiVersion: v1
kind: Secret
metadata:
  name: spotizerr-secrets
  namespace: spotizerr
type: Opaque
stringData:
  # Required: Redis password
  REDIS_PASSWORD: "CHANGE_ME_TO_SECURE_PASSWORD"
  
  # Required if ENABLE_AUTH=true: JWT secret for token signing
  # Generate with: openssl rand -base64 64
  JWT_SECRET: "CHANGE_ME_TO_LONG_RANDOM_STRING"
  
  # Required if ENABLE_AUTH=true: Default admin password
  DEFAULT_ADMIN_PASSWORD: "CHANGE_ME_TO_SECURE_PASSWORD"
  
  # Optional: SSO credentials (if SSO_ENABLED=true)
  # GOOGLE_CLIENT_ID: "your-google-client-id"
  # GOOGLE_CLIENT_SECRET: "your-google-client-secret"
  # GITHUB_CLIENT_ID: "your-github-client-id"
  # GITHUB_CLIENT_SECRET: "your-github-client-secret"
  # CUSTOM_SSO_CLIENT_ID: "your-custom-client-id"
  # CUSTOM_SSO_CLIENT_SECRET: "your-custom-client-secret"

---
# Quick commands for secret management:
#
# Generate a secure random string for JWT_SECRET:
#   openssl rand -base64 64 | tr -d '\n'
#
# Generate a secure random password:
#   openssl rand -base64 32 | tr -d '\n'
#
# View existing sealed secrets:
#   kubectl get sealedsecrets -n spotizerr
#
# View the actual secret (after sealing):
#   kubectl get secret spotizerr-secrets -n spotizerr -o yaml
#
# Delete secret to recreate:
#   kubectl delete secret spotizerr-secrets -n spotizerr

