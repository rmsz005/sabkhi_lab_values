---
# N8n Workflow Automation Configuration

# Deployment configuration
replicaCount: 1

image:
  repository: n8nio/n8n
  pullPolicy: IfNotPresent
  tag: "1.107.4"

# Service configuration
service:
  type: ClusterIP
  port: 80
  targetPort: 5678

# Ingress configuration with TLS
ingress:
  enabled: true
  className: nginx
  annotations:
    nginx.ingress.kubernetes.io/proxy-body-size: "0"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "600"
    cert-manager.io/cluster-issuer: "letsencrypt"
    cert-manager.io/common-name: "n8n.internal.rmsz005.com"
  hosts:
    - host: n8n.internal.rmsz005.com
      paths:
        - path: /
          pathType: Prefix
    - host: "" # Catch-all rule for direct IP access
      paths:
        - path: /n8n
          pathType: Prefix
  tls:
    - hosts:
        - n8n.internal.rmsz005.com
      secretName: n8n-tls

# Persistence configuration using Longhorn
persistence:
  enabled: true
  type: pvc
  size: 10Gi
  storageClass: "longhorn-ssd-replicated"
  accessModes:
    - ReadWriteOnce

# Resource configuration for production
resources:
  requests:
    memory: "512Mi"
    cpu: "250m"
  limits:
    memory: "2Gi"
    cpu: "1000m"

# N8n configuration
config:
  database:
    type: "sqlite"
    sqlite:
      database: "/home/node/.n8n/database.sqlite"
  
  # Encryption key from sealed secret
  encryptionKey:
    valueFrom:
      secretKeyRef:
        name: n8n-encryption-secret
        key: encryption-key
  
  # Basic configuration
  generic:
    timezone: "UTC"
  
  # Security settings
  security:
    basicAuth:
      active: false  # We'll rely on ingress for authentication
  
  # Execution settings
  executions:
    mode: "regular"
    timeout: 3600
    maxTimeout: 3600
    saveDataOnError: "all"
    saveDataOnSuccess: "all"
    saveDataManualExecutions: true
  
  # Node.js settings
  nodeFunction:
    allowBuiltin: "*"
    allowExternal: "*"

# Environment variables
env:
  N8N_HOST: "n8n.internal.rmsz005.com"
  N8N_PORT: "5678"
  N8N_PROTOCOL: "https"
  WEBHOOK_URL: "https://n8n.internal.rmsz005.com/"
  N8N_LOG_LEVEL: "info"
  N8N_METRICS: "true"
  NODE_ENV: "production"

# Security context
securityContext:
  runAsNonRoot: true
  runAsUser: 1000
  runAsGroup: 1000
  fsGroup: 1000

# Pod security context
podSecurityContext:
  runAsNonRoot: true
  runAsUser: 1000
  runAsGroup: 1000
  fsGroup: 1000

# Health checks
livenessProbe:
  httpGet:
    path: /healthz
    port: 5678
  initialDelaySeconds: 60
  periodSeconds: 30
  timeoutSeconds: 10
  failureThreshold: 3

readinessProbe:
  httpGet:
    path: /healthz
    port: 5678
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3

# Node selector to prefer SSD nodes for better performance
nodeSelector: {}

# Tolerations and affinity
tolerations: []
affinity: {}

# Service account
serviceAccount:
  create: true
  annotations: {}
  name: "n8n"

# Pod annotations
podAnnotations:
  prometheus.io/scrape: "true"
  prometheus.io/port: "5678"
  prometheus.io/path: "/metrics"

# Pod disruption budget for high availability
podDisruptionBudget:
  enabled: false  # Set to true if running multiple replicas
  minAvailable: 1
