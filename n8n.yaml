---
# N8n Community Charts Configuration
# https://github.com/community-charts/helm-charts/tree/main/charts/n8n

# Image configuration
image:
  repository: n8nio/n8n
  pullPolicy: IfNotPresent
  tag: "1.107.4"

# Service configuration  
service:
  enabled: true
  type: ClusterIP
  port: 5678
  name: http

# Ingress configuration with TLS
ingress:
  enabled: true
  className: nginx
  annotations:
    nginx.ingress.kubernetes.io/proxy-body-size: "0"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "600"
    cert-manager.io/cluster-issuer: "letsencrypt"
    cert-manager.io/common-name: "n8n.internal.rmsz005.com"
  hosts:
    - host: n8n.internal.rmsz005.com
      paths:
        - path: /
          pathType: Prefix
    - host: ""  # Catch-all rule for direct IP access
      paths:
        - path: /n8n
          pathType: Prefix
  tls:
    - hosts:
        - n8n.internal.rmsz005.com
      secretName: n8n-tls

# Database configuration (SQLite for simplicity)
db:
  type: sqlite
  tablePrefix: ""
  sqlite:
    database: "database.sqlite"
    poolSize: 0
    vacuum: false

# Main node configuration
main:
  # Single replica for now
  count: 1
  
  # Pod Disruption Budget
  pdb:
    enabled: false
    minAvailable: 1

  # Resources
  resources:
    requests:
      memory: "512Mi"
      cpu: "250m"
    limits:
      memory: "2Gi"
      cpu: "1000m"

  # Persistence using Longhorn SSD
  persistence:
    enabled: true
    mountPath: "/home/node/.n8n"
    storageClass: "longhorn-ssd-replicated"
    accessMode: ReadWriteOnce
    size: 10Gi
    annotations:
      helm.sh/resource-policy: keep

  # Health probes
  livenessProbe:
    httpGet:
      path: /healthz
      port: "http"
    initialDelaySeconds: 60
    periodSeconds: 30
    timeoutSeconds: 10
    failureThreshold: 3

  readinessProbe:
    httpGet:
      path: /healthz/readiness
      port: "http"
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3

  # Environment variables for n8n configuration
  extraEnvVars:
    N8N_HOST: "n8n.internal.rmsz005.com"
    N8N_PORT: "5678"
    N8N_PROTOCOL: "https"
    WEBHOOK_URL: "https://n8n.internal.rmsz005.com/"
    N8N_LOG_LEVEL: "info"
    N8N_METRICS: "true"
    NODE_ENV: "production"

  # Reference to sealed secrets for environment variables
  extraSecretNamesForEnvFrom:
    - n8n-encryption-secret

# Security contexts
podSecurityContext:
  fsGroup: 1000
  fsGroupChangePolicy: "OnRootMismatch"

securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
      - ALL
  readOnlyRootFilesystem: false
  runAsNonRoot: true
  privileged: false
  runAsUser: 1000
  runAsGroup: 1000

# Service account
serviceAccount:
  create: true
  automount: true
  annotations: {}
  name: "n8n"

# Pod annotations for monitoring
podAnnotations:
  prometheus.io/scrape: "true"
  prometheus.io/port: "5678"
  prometheus.io/path: "/metrics"

# Logging configuration
log:
  level: info
  output:
    - console

# Node configurations
nodes:
  builtin:
    enabled: true
    modules:
      - "*"
  external:
    allowAll: true
    reinstallMissingPackages: false

# API configuration
api:
  enabled: true
  path: api
  swagger:
    enabled: true

# Diagnostics and telemetry (disabled for privacy)
diagnostics:
  enabled: false

versionNotifications:
  enabled: false

# License configuration (community version)
license:
  enabled: false

# External services (disabled, using defaults)
redis:
  enabled: false

postgresql:
  enabled: false

minio:
  enabled: false

# Monitoring
serviceMonitor:
  enabled: false

# Node scheduling
nodeSelector: {}
tolerations: []
affinity: {}

# DNS configuration
dnsPolicy: ""
dnsConfig: {}