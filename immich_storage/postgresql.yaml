---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: immich-postgresql
  namespace: immich
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: immich-postgresql
  template:
    metadata:
      labels:
        app: immich-postgresql
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 999  # postgres user
        fsGroup: 999
      containers:
      - name: postgresql
        image: tensorchord/pgvecto-rs:pg15-v0.2.0@sha256:90724186f0a3517cf6914295b5ab410db9ce23190a2d9d0b9dd6463e3fa298f0
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false  # PostgreSQL needs write access
          capabilities:
            drop:
            - ALL
        env:
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: immich-postgresql-secret
              key: username
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: immich-postgresql-secret
              key: password
        - name: POSTGRES_DB
          value: immich
        - name: PGDATA
          value: "/var/lib/postgresql/data/pgdata"  # Use subdirectory to avoid lost+found issues
        # PostgreSQL Performance Tuning
        - name: POSTGRES_INITDB_ARGS
          value: "--encoding=UTF8 --lc-collate=C --lc-ctype=C"
        - name: POSTGRES_HOST_AUTH_METHOD
          value: "md5"  # Require password authentication
        ports:
        - containerPort: 5432
        resources:
          requests:
            memory: "768Mi"
            cpu: "150m"
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - exec pg_isready -U "$POSTGRES_USER" -d "$POSTGRES_DB" -h 127.0.0.1 -p 5432
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 6
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - exec pg_isready -U "$POSTGRES_USER" -d "$POSTGRES_DB" -h 127.0.0.1 -p 5432
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
        - name: init-scripts
          mountPath: /docker-entrypoint-initdb.d
        - name: postgres-config
          mountPath: /etc/postgresql/postgresql.conf
          subPath: postgresql.conf
      volumes:
      - name: postgres-data
        persistentVolumeClaim:
          claimName: immich-postgresql-pvc
      - name: init-scripts
        configMap:
          name: immich-postgresql-init
      - name: postgres-config
        configMap:
          name: immich-postgresql-config
---
apiVersion: v1
kind: Service
metadata:
  name: immich-postgresql
  namespace: immich
spec:
  selector:
    app: immich-postgresql
  ports:
  - port: 5432
    targetPort: 5432
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: immich-postgresql-init
  namespace: immich
data:
  create-extensions.sql: |
    CREATE EXTENSION IF NOT EXISTS cube;
    CREATE EXTENSION IF NOT EXISTS earthdistance;
    CREATE EXTENSION IF NOT EXISTS vectors;
---
# PostgreSQL Performance Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: immich-postgresql-config
  namespace: immich
data:
  postgresql.conf: |
    # Memory Configuration (optimized for photo management)
    shared_buffers = 256MB                    # 25% of available memory
    effective_cache_size = 1GB                # Estimate of total memory available
    work_mem = 16MB                          # Memory for sorts/hashes
    maintenance_work_mem = 64MB              # Memory for maintenance operations
    
    # Connection Configuration
    max_connections = 100
    
    # WAL Configuration (for better write performance)
    wal_buffers = 16MB
    checkpoint_completion_target = 0.9
    
    # Query Performance
    random_page_cost = 1.1                   # Assuming SSD/NVMe storage
    effective_io_concurrency = 200           # For SSD/NVMe
    
    # Logging (important for troubleshooting)
    log_destination = 'stderr'
    logging_collector = on
    log_min_duration_statement = 1000        # Log queries taking > 1s
    log_line_prefix = '%t [%p-%l] %q%u@%d '
    
    # Performance monitoring
    shared_preload_libraries = 'pg_stat_statements'
    track_activity_query_size = 2048
    pg_stat_statements.track = all
