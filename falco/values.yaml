---
# Falco runtime security configuration
# Detects suspicious behavior and threats in real-time

# DaemonSet to run on all nodes
controller:
  kind: daemonset

# Driver configuration - use modern eBPF (best performance, least privilege)
driver:
  enabled: true
  kind: modern_ebpf
  modernEbpf:
    # Run with least privilege (no privileged container!)
    leastPrivileged: true
    bufSizePreset: 4
    dropFailedExit: false

# Resources
resources:
  requests:
    cpu: 100m
    memory: 512Mi
  limits:
    cpu: 1000m
    memory: 1024Mi

# Tolerations to run on all nodes including control plane
tolerations:
  - effect: NoSchedule
    key: node-role.kubernetes.io/master
  - effect: NoSchedule
    key: node-role.kubernetes.io/control-plane

# Security context (least privilege for modern_ebpf)
containerSecurityContext:
  capabilities:
    add:
      - BPF
      - SYS_RESOURCE
      - PERFMON
      - SYS_PTRACE
    drop:
      - ALL

# Falco configuration
falco:
  # JSON output format
  json_output: true
  json_include_output_property: true
  json_include_tags_property: true
  
  # Log level
  log_level: info
  
  # Rule priorities to alert on (notice = informational, warning = suspicious, error = critical)
  priority: notice
  
  # Buffering
  buffered_outputs: true
  
  # gRPC output to Falcosidekick
  grpc:
    enabled: true
    bind_address: "unix:///run/falco/falco.sock"
    threadiness: 0
  
  grpc_output:
    enabled: true
  
  # HTTP output (disabled)
  http_output:
    enabled: false
  
  # File output (disabled)
  file_output:
    enabled: false
  
  # Program output (disabled)
  program_output:
    enabled: false
  
  # Stdout output (also enabled for Promtail)
  stdout_output:
    enabled: true

# Metrics exporter
metrics:
  enabled: true
  serviceMonitor:
    enabled: false  # Enable later for Prometheus scraping
  interval: 1h

# Falcosidekick for forwarding Falco events to various outputs
falcosidekick:
  enabled: true
  
  # WebUI for visualizing Falco events
  webui:
    enabled: true
    replicaCount: 1
    
    # Resources for WebUI
    resources:
      requests:
        cpu: 50m
        memory: 128Mi
      limits:
        cpu: 200m
        memory: 256Mi
    
    # Ingress for WebUI
    ingress:
      enabled: true
      ingressClassName: nginx
      annotations:
        cert-manager.io/cluster-issuer: "letsencrypt"
        cert-manager.io/common-name: "falco.internal.rmsz005.com"
      hosts:
      - host: falco.internal.rmsz005.com
        paths:
        - path: /
          pathType: Prefix
      tls:
      - secretName: falco-webui-tls
        hosts:
        - falco.internal.rmsz005.com
  
  # Loki output configuration
  config:
    loki:
      hostport: http://loki.monitoring.svc.cluster.local:3100
      minimumpriority: warning
    
    # Optional: Add Slack, Discord, etc. later
    # slack:
    #   webhookurl: ""
    #   minimumpriority: warning
  
  # Resources for Falcosidekick
  resources:
    requests:
      cpu: 50m
      memory: 128Mi
    limits:
      cpu: 200m
      memory: 256Mi

# Falcoctl for artifact management
falcoctl:
  artifact:
    install:
      enabled: true
      # Install default ruleset
      args:
        - --log-format=json

